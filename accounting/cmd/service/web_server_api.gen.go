// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// AccountID defines model for AccountID.
type AccountID string

// AccountIDResponse defines model for AccountIDResponse.
type AccountIDResponse struct {
	Id string `json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get basic information for an account by ID
	// (GET /accounts/{accountID})
	GetAccount(w http.ResponseWriter, r *http.Request, accountID AccountID)
	// Disable an account by ID
	// (PUT /accounts/{accountID}/disable)
	DisableAccount(w http.ResponseWriter, r *http.Request, accountID AccountID)
	// Enable an account by ID
	// (PUT /accounts/{accountID}/enable)
	EnableAccount(w http.ResponseWriter, r *http.Request, accountID AccountID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID" -------------
	var accountID AccountID

	err = runtime.BindStyledParameter("simple", false, "accountID", chi.URLParam(r, "accountID"), &accountID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter accountID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetAccount(w, r.WithContext(ctx), accountID)
}

// DisableAccount operation middleware
func (siw *ServerInterfaceWrapper) DisableAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID" -------------
	var accountID AccountID

	err = runtime.BindStyledParameter("simple", false, "accountID", chi.URLParam(r, "accountID"), &accountID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter accountID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.DisableAccount(w, r.WithContext(ctx), accountID)
}

// EnableAccount operation middleware
func (siw *ServerInterfaceWrapper) EnableAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID" -------------
	var accountID AccountID

	err = runtime.BindStyledParameter("simple", false, "accountID", chi.URLParam(r, "accountID"), &accountID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter accountID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.EnableAccount(w, r.WithContext(ctx), accountID)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/accounts/{accountID}", wrapper.GetAccount)
	})
	r.Group(func(r chi.Router) {
		r.Put(baseURL+"/accounts/{accountID}/disable", wrapper.DisableAccount)
	})
	r.Group(func(r chi.Router) {
		r.Put(baseURL+"/accounts/{accountID}/enable", wrapper.EnableAccount)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SVzW7bOBDHX4WY3cMuoJjO7qXQLUDSwOghRZtbkANNjSymEskORy4MQe9eDKVEduIW",
	"6DmAYVvz+Z8fB9QANnQxePScoBwgGjIdMlJ+urI29J431/JQYbLkIrvgoQQzuZSr1D9976p/oQAnjmi4",
	"gQK86XAJ21xDAYTfe0dYQcnUYwHJNtgZKV0H6gxDCVIJCuBDlOTE5PwOxnGU5BSDT3iq68tsFaMNntGz",
	"/DUxts4akaqfkugdjrpFChGJ3VTLVfL9uuOx2geJeXxRFbZPaHlSdcrk7tNkdb4Oz4qMzYpmHB/vb+9u",
	"79QmpR4TFNBTCyU0zDGVWu8cN/12ZUOnExv7rU+65l3YBe2mhDcd7xtUM+KLhLR3FtXV541ySUVDrEKt",
	"uEE1t62wCz4xZTDqCJIgd9yKwhmt+rpUgwL2SGnqeLlar9YiJET0Jjoo4f9sKvLJZ6R6lpT08HL+ozh2",
	"mGEI/tx3U0EJt8hz01xj2b+HAf4mrKGEv/SypXoJ0ct+jo+vVuS/9Vp+zhV4idNv9ygTrk3f8lH2aqWn",
	"T2oMYXWxC/oHbnWKaFcH07W/qH5DFGipPBaQ+q4zdJiGVluTnFWyLLL9ciR1IGX884mq7UHJaGNxnqiu",
	"XDLbNi9/7M+QvZ7874/uPPifsET/W5Q3/n2SnOY+B1LCkPbPBE5vsqEJicdyiIF41HJNFLA35KRYHlv8",
	"00tlHgLaYE2bzWMBknfq/rBeX0rXx/FnAAAA//9B1qXoswYAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
