openapi: "3.0.0"
info:
  version: "1.0.0"
  title: Kitchen Service API
  description: The kitchen-service API is part of the FTGOGO demonstration application
  contact:
    name: FTGOGO Issues
    url: https://github.com/stackus/ftgogo/issues
servers:
  - url: https://{host}:{port}/api
    variables:
      host:
        default: localhost
      port:
        default: "8004"
paths:
  /tickets/{ticketID}/accept:
    post:
      summary: Accept a ticket by ID
      operationId: acceptTicket
      parameters:
        - $ref: '#/components/parameters/TicketID'
      requestBody:
        description: accepts a ticket with a ready by time
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ ready_by ]
              properties:
                ready_by:
                  type: string
                  format: date-time
      responses:
        '202':
          $ref: '#/components/responses/TicketIDResponse'
        default:
          $ref: '../../../shared-go/web/spec.yaml#/components/responses/ErrorResponse'
  /restaurants/{restaurantID}:
    get:
      summary: Get/Confirm a restaurant exists by ID
      operationId: getRestaurant
      parameters:
        - $ref: '#/components/parameters/RestaurantID'
      responses:
        '200':
          $ref: '#/components/responses/RestaurantIDResponse'
        default:
          $ref: '../../../shared-go/web/spec.yaml#/components/responses/ErrorResponse'

components:
  parameters:
    TicketID:
      in: path
      name: ticketID
      description: ticket id (uuid)
      required: true
      schema:
        type: string
        format: uuid
    RestaurantID:
      in: path
      name: restaurantID
      description: restaurant id (uuid)
      required: true
      schema:
        type: string
        format: uuid
  responses:
    TicketIDResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: [ id ]
            properties:
              id:
                type: string
    RestaurantIDResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: [ id ]
            properties:
              id:
                type: string