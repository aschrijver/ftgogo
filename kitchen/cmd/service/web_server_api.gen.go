// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// RestaurantID defines model for RestaurantID.
type RestaurantID string

// TicketID defines model for TicketID.
type TicketID string

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// TicketIDResponse defines model for TicketIDResponse.
type TicketIDResponse struct {
	Id string `json:"id"`
}

// AcceptTicketJSONBody defines parameters for AcceptTicket.
type AcceptTicketJSONBody struct {
	ReadyBy time.Time `json:"ready_by"`
}

// AcceptTicketRequestBody defines body for AcceptTicket for application/json ContentType.
type AcceptTicketJSONRequestBody AcceptTicketJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get/Confirm a restaurant exists by ID
	// (GET /restaurants/{restaurantID})
	GetRestaurant(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)
	// Accept a ticket by ID
	// (POST /tickets/{ticketID}/accept)
	AcceptTicket(w http.ResponseWriter, r *http.Request, ticketID TicketID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRestaurant operation middleware
func (siw *ServerInterfaceWrapper) GetRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameter("simple", false, "restaurantID", chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter restaurantID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRestaurant(w, r.WithContext(ctx), restaurantID)
}

// AcceptTicket operation middleware
func (siw *ServerInterfaceWrapper) AcceptTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ticketID" -------------
	var ticketID TicketID

	err = runtime.BindStyledParameter("simple", false, "ticketID", chi.URLParam(r, "ticketID"), &ticketID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ticketID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.AcceptTicket(w, r.WithContext(ctx), ticketID)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/restaurants/{restaurantID}", wrapper.GetRestaurant)
	})
	r.Group(func(r chi.Router) {
		r.Post(baseURL+"/tickets/{ticketID}/accept", wrapper.AcceptTicket)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUT28TPxD9Ktb8fgeQtnEoHNDeCoUq6qGo9FZVyPFOsm53bdczm7Ja7XdH9ibZhAQV",
	"VAkhRUns+ffmed50oF3tnUXLBHkHXgVVI2NIp2skVk1Qlmfn8Vwg6WA8G2chh7C1ClOIV01jiteQgYk2",
	"r7iEDKyqcc9zdg4ZBHxsTMACcg4NZkC6xFrFAgsXasWQQ0wGGXDrYzxxMHYJfZ/BjdEPeBQOJ8tzUHgT",
	"/xIYfQwm7yzhAU/Xa0O8184yWo5/lfeV0SpilfcUAXc7BX1wHgObIZ0p4vdh7yPg2+hztwXm5veoeQC2",
	"T8rVJeyQ9u9hi7fGLtwGkdIJ0fqxPt9cXF1ciRlRgwQZNKGCHEpmT7mUS8NlM59oV0tipR8akgteuqWT",
	"Zgg4qHhTongwrEu0J4RhZTSKsy8zYUh4FVi4heASxbpsgbWzxCERI3ZIihNhuIoIL4ds4uuYDTJYYaCh",
	"4pvJdDKNQJxHq7yBHN6mqyzNZaJUjvIg2e1qpY/mJSZK4iOk6rMCcrhAHocuJRt1e9vB/wEXkMN/clS3",
	"HF3knq77u5+m+XQ6jT/Hcmz95NGRT4QvVFPxToLJRA4fKlXA4mTp5BPOJXnUk1bV1S8KfArBhTFznwE1",
	"da1CO3QvPzq7MKEWSuzsIfxuiEnMWxEb6zOQg95Jdhvh91JpjT4h9I6OcHuW7INm/pja7X4aaH1skPiD",
	"K9oXSC6gKtpv83ZvMxWK8YRNjUe35K4at+G/o8mBGxJKrNfpk+EycayKNvK6Lrm/O/uDCTp9foIOltLf",
	"mp7hfccWN9MSnTCsNg+9v2y60hH3eedd4F5GJWewUsGoeTX0XK5nadsCVE6rKl33GcS4ffP76fRdrHrX",
	"/wgAAP//mI831YUHAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
