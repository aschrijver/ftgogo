// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/stackus/ftgogo/order-history/internal/application/queries"
)

// OrderID defines model for OrderID.
type OrderID string

// OrderHistoryResponse defines model for OrderHistoryResponse.
type OrderHistoryResponse externalRef0.OrderHistory

// GetConsumerOrderHistoryParams defines parameters for GetConsumerOrderHistory.
type GetConsumerOrderHistoryParams struct {

	// consumer id (uuid)
	ConsumerID string `json:"consumerID"`

	// search filters
	Filter *externalRef0.OrderHistoryFilters `json:"filter,omitempty"`

	// provide to read the next page of results
	Next *string `json:"next,omitempty"`

	// provide to set the results page size
	Limit *int `json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search orders for a consumer
	// (GET /orders)
	GetConsumerOrderHistory(w http.ResponseWriter, r *http.Request, params GetConsumerOrderHistoryParams)
	// Get information for an order by ID
	// (GET /orders/{orderID})
	GetOrderHistory(w http.ResponseWriter, r *http.Request, orderID OrderID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConsumerOrderHistory operation middleware
func (siw *ServerInterfaceWrapper) GetConsumerOrderHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsumerOrderHistoryParams

	// ------------- Required query parameter "consumerID" -------------
	if paramValue := r.URL.Query().Get("consumerID"); paramValue != "" {

	} else {
		http.Error(w, "Query argument consumerID is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "consumerID", r.URL.Query(), &params.ConsumerID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter consumerID: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter filter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := r.URL.Query().Get("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", r.URL.Query(), &params.Next)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter next: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetConsumerOrderHistory(w, r.WithContext(ctx), params)
}

// GetOrderHistory operation middleware
func (siw *ServerInterfaceWrapper) GetOrderHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetOrderHistory(w, r.WithContext(ctx), orderID)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/orders", wrapper.GetConsumerOrderHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/orders/{orderID}", wrapper.GetOrderHistory)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTW/bOBD9K8TsHnYBRXSyCLDQrWga1+jBRZNbkQMtjSSmEskMR25cQ/+9ICXHllMn",
	"h7boTfwYvjdv3oy2kNvWWYOGPWRbcIpUi4wUV0sqkBZX4bNAn5N2rK2BDGw4ELoQ/3SdLv6FBHTYdopr",
	"SMCoFneXFleQAOFDpwkLyJg6TMDnNbYqPFtaahVDBuEdSIA3LoR6Jm0q6Ps+BHtnjcc9o/fas6XNp/Eg",
	"7OfWMBoOn8q5RucqMJX3PtDdHgD+TVhCBmkq01Rqw0hGNfIw5qFD0uild5inG9U2f8m9RnJ4yctDIgPP",
	"qULLD8OuNqXdEVR5JDjKc307X86XYuF9hx4S6KiBDGpm5zMpK811t0pz20rPKv/SeVlyZSsr9RDwDPG2",
	"RhElP/NIa52jePNxIbQXThELWwquUYygBbbWeKaYsTjIPpRAcxP4xQzFzf4tSGCN5Ae083SWzgIJ69Ao",
	"pyGD/+JWEl0QiyUjnfhZYUzdOhwwFwVkMEd+a43vWqSJnMnEhp+PzZePMc/9F0q32Rtwd/EnPZgcE/Co",
	"KK9FqZvI8Mfgwykkv9l71yOJPgHPm1i4AtEtV/eYMzzn7siudYGCrSBURTSFwUcWTlUYXELou4ZPZRWu",
	"TnJ6VawDQI8c8UaIAdLrb3gCrNGtnqIVWKquYcguZgm06lG3XQvZZVhoMyzOnwoYFK6QoO/vjqbIxWz2",
	"K+rx9KY84eSnCRWbdaR+hJum0teKsDirrPyKq1ex3hFZ2r8cCt+1raINZHAzOHPoO1FaEkrsuiBeHVtS",
	"bsfh3L/UnC835ZjFhOX+itz9O14R/0SSf1TFObIIczuMhTAfo45mUFWsNiJkFSOQ1js1ptN7W1vPfbZ1",
	"lriXYTwmsFak1aoZRAjnE0NDY3PVxO0+gRA3Pf5/NrsMqHf99wAAAP//HuhlxrMHAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
