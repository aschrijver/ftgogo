// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"
	"time"

	externalRef0 "serviceapis/commonapi"
	"serviceapis/restaurantapi"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// OrderID defines model for OrderID.
type OrderID string

// RestaurantID defines model for RestaurantID.
type RestaurantID string

// OrderIDResponse defines model for OrderIDResponse.
type OrderIDResponse struct {
	Id string `json:"id"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	OrderId    string `json:"order_id"`
	OrderTotal int    `json:"order_total"`
	State      string `json:"state"`
}

// OrderStatusResponse defines model for OrderStatusResponse.
type OrderStatusResponse struct {
	Status string `json:"status"`
}

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody struct {
	ConsumerId      string                          `json:"consumer_id"`
	DeliveryAddress restaurantapi.Address           `json:"delivery_address"`
	DeliveryTime    time.Time                       `json:"delivery_time"`
	LineItems       externalRef0.MenuItemQuantities `json:"line_items"`
	RestaurantId    string                          `json:"restaurant_id"`
}

// ReviseOrderJSONBody defines parameters for ReviseOrder.
type ReviseOrderJSONBody struct {
	RevisedQuantities externalRef0.MenuItemQuantities `json:"revised_quantities"`
}

// CreateOrderRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody CreateOrderJSONBody

// ReviseOrderRequestBody defines body for ReviseOrder for application/json ContentType.
type ReviseOrderJSONRequestBody ReviseOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new order for delivery
	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Get basic information for an order by ID
	// (GET /orders/{orderID})
	GetOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)
	// Cancel an order by ID
	// (PUT /orders/{orderID}/cancel)
	CancelOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)
	// Revise an orders menu items by ID
	// (PUT /orders/{orderID}/revise)
	ReviseOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)
	// Get/Confirm a restaruant exists by ID
	// (GET /restaurants/{restaurantID})
	GetRestaurant(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.CreateOrder(w, r.WithContext(ctx))
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetOrder(w, r.WithContext(ctx), orderID)
}

// CancelOrder operation middleware
func (siw *ServerInterfaceWrapper) CancelOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.CancelOrder(w, r.WithContext(ctx), orderID)
}

// ReviseOrder operation middleware
func (siw *ServerInterfaceWrapper) ReviseOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.ReviseOrder(w, r.WithContext(ctx), orderID)
}

// GetRestaurant operation middleware
func (siw *ServerInterfaceWrapper) GetRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameter("simple", false, "restaurantID", chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter restaurantID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRestaurant(w, r.WithContext(ctx), restaurantID)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Post(baseURL+"/orders", wrapper.CreateOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/orders/{orderID}", wrapper.GetOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(baseURL+"/orders/{orderID}/cancel", wrapper.CancelOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(baseURL+"/orders/{orderID}/revise", wrapper.ReviseOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/restaurants/{restaurantID}", wrapper.GetRestaurant)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+VwhuDxugmG63h0FvWboFxjCkS/tWBAYtnS124o8ej+4MQ//7QEq2ZFtZ",
	"nNUNCgSBzB933326++605YXVzhow5Hm+5U6i1ECA6dcdloCzN/GxBF+gcqSs4Tm3cYOpkv0Qgip/5BlX",
	"cdlJqnjGjdSwOzR7wzOO8CkohJLnhAEy7osKtIxmlxa1JJ7zaIdnnDYuXvWEyqx402T8HjzJgNLQGBDc",
	"7z6FBod2vgRSEy97Z42HIUn33VpcKqwhMBQfpXO1KmSEKz76iHk78OXQOkBSrSVVxv+nFPRYP8QzD3tM",
	"dvERCmoxHfJy9wdvshbaBYClNzkfhZd1m2RJ1oN9ZQhWgPGAJ0nJO5igYwzXzqFdy/otmDIayboViHTf",
	"Q4wpPd5IU8DgVPu77o6tlVfW7HYfsieI28ewA3SI/JmkviNJwV+AWp8MPf3eu3PnwxzWzbeXm3FVmaXd",
	"IZJFQtTV6u/vb+9u79jM+wCeZzxgzXNeETmfC7FSVIXFpLBaeJLF38GLJa3sygrVXjjx+L4Cll72lQdc",
	"qwLY9dsZU545icTsklEFrHNagrbGEyZa2ICiKAWK6ogvpQB719viGV8D+tbbq8l0Mk2V4cBIp3jOf0pL",
	"WZKkRKdIcFrJtT7FHtlOjmYlz/kNgiRIjjq1Ak+/2nLzBe+wsMYH/Xgll1CrNeBmLssSwac73yMsec4n",
	"E9H+dQReSae8KKzWNoYovINispG6/k70DUW0QLy47uwNfZDScCC3pSS4SqvZKbRaGZgrAn05UH+CCTMC",
	"/VeQhlTiqJX2rmzm56T8kNLjy8fBjhB8ENg5tVOktGiTmXVZcdLNjjvU6+mrAWsHZOzPieM2llwvZahp",
	"lPFKIpRXKys+w+IRonvbvyHavg/FqHzQWuJmn+hMMgOfu7iWFtmOqnS6qxax7UaKJkJawUjZ3ALtamY4",
	"ynwYj74/sgufNw8n5E3PJO/FqbsFYgvpVcGilMYyipIV2ZOmo3KxYTGoMQ5FkdppkokwpkBp++Jsvj6T",
	"zaMO+2LpmKI+j0CMMwg8SmAaUeASBF5C/Fuw5fxTL3dfU0mPdHLE+zly1157ttx94znWJsY+xzzTYAJL",
	"TWCYb3038WI7/Hz5T/nr575nJ93Bp9b/E8LRqfMF9VDcWLNUqJlkiTGM+cbgH+Wp5zZeAlzvWDmcLreV",
	"9dTkW2eRGhHHt4yvJSq5qFseqm5e24fEa1vIOi03GY/3Drd/mU5/jl4fmn8DAAD//+gzawxuDwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
