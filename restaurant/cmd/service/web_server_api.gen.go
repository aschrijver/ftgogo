// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	externalRef1 "serviceapis/restaurantapi"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Restaurant defines model for Restaurant.
type Restaurant struct {
	Address externalRef1.Address `json:"address"`
	Id      string               `json:"id"`
	Menu    struct {
		MenuItems []externalRef1.MenuItem `json:"menu_items"`
	} `json:"menu"`
	Name string `json:"name"`
}

// RestaurantID defines model for RestaurantID.
type RestaurantID string

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// RestaurantResponse defines model for RestaurantResponse.
type RestaurantResponse Restaurant

// CreateRestaurantJSONBody defines parameters for CreateRestaurant.
type CreateRestaurantJSONBody struct {
	Address externalRef1.Address `json:"address"`
	Menu    struct {
		MenuItems []externalRef1.MenuItem `json:"menu_items"`
	} `json:"menu"`
	Name string `json:"name"`
}

// CreateRestaurantRequestBody defines body for CreateRestaurant for application/json ContentType.
type CreateRestaurantJSONRequestBody CreateRestaurantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new restaurant for delivery
	// (POST /restaurants)
	CreateRestaurant(w http.ResponseWriter, r *http.Request)
	// Get information for an restaurant by ID
	// (GET /restaurants/{restaurantID})
	GetRestaurant(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateRestaurant operation middleware
func (siw *ServerInterfaceWrapper) CreateRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.CreateRestaurant(w, r.WithContext(ctx))
}

// GetRestaurant operation middleware
func (siw *ServerInterfaceWrapper) GetRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameter("simple", false, "restaurantID", chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter restaurantID: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRestaurant(w, r.WithContext(ctx), restaurantID)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Post(baseURL+"/restaurants", wrapper.CreateRestaurant)
	})
	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/restaurants/{restaurantID}", wrapper.GetRestaurant)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RVT2/TThD9Kqv5/Q4guXEKHJBvhUIUIVRUeqsqtLEn8RZ7d5kdp4oif3c0thM7dUop",
	"CC5IUeT9N/P2vbczW0hd6Z1FywGSLXhNukRGakaXGFhXpC3Pz2WcYUjJeDbOQgK0X1UmU8+qymTPIQIj",
	"a15zDhFYXeLBzvk5RED4rTKEGSRMFUYQ0hxLLQmWjkrNkIAEgwh44+V8YDJ2BXVdy+HgnQ04AnjZLch8",
	"6iyjZfnU3hcm1YI5vg0CfDtI6Ml5JDZtOJPJ//2kQ8DXsudmD8wtbjHlFtghORcfoI4G+H4J3f+ES0jg",
	"v7gXKW5XQ9yHfih9vWP2HlXje+ssIwxhkHIyidtfQFqbFE+0N0FglM5qb+LgMZ1sdFkcxXbWxaujjtJH",
	"dI2gRFuNccnsF8NYtursPn6Isffa4zg/oq3mjKUg6CBpIr0ZiT4AMhZ/Z/OfcE63Ndoz3t38uKOMXbqd",
	"X3Ta6NY9qPdXs4vZhZqHUKEEqaiABHJmH5I4XhnOq8UkdWUcWKdfqxAveeVWLjbtgZFdrnJUPXEnHaHq",
	"7NNcmaC8JlZuqThH1WXOsHQ2MDXOVQMXi7iGCwHZO0597gNCBGuk0OY9nUwnU4HjPIqvIIGXzVTUVJBG",
	"7YGibYlyoaFCjNKknGeQwFtCzTgwecs9Bn7jss1v1IQ/+Db+BdM/xe+HnkwbRQe2VJ2gow5yvyu8mJ4+",
	"VD33++KjraMBsdRVwUcpzzVhdrJy8R0uHmC5T/COyFEfWapxVZaaNnu3Kq0s3g1vuHSkMizMGqnVY2j+",
	"eDvso7UgXOGRpzBDPngHw55+fZyWfssBL1DfjKidPoXav07sDFlJ2ZR2I5VJCNV2SPFio+RizTGk9Y6V",
	"wwq6zV3gOtl6R1zHUpgiWGsyelG0PORdEdpfCgqX6qKZriOQc4fLr6fTV5L1pv4eAAD//+5qNpNzCQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
