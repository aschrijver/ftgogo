// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	externalRef1 "serviceapis/restaurantapi"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Restaurant defines model for Restaurant.
type Restaurant struct {
	Address externalRef1.Address `json:"address"`
	Id      string               `json:"id"`
	Menu    struct {
		MenuItems []externalRef1.MenuItem `json:"menu_items"`
	} `json:"menu"`
	Name string `json:"name"`
}

// RestaurantID defines model for RestaurantID.
type RestaurantID string

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// RestaurantResponse defines model for RestaurantResponse.
type RestaurantResponse Restaurant

// CreateRestaurantJSONBody defines parameters for CreateRestaurant.
type CreateRestaurantJSONBody struct {
	Address externalRef1.Address `json:"address"`
	Menu    struct {
		MenuItems []externalRef1.MenuItem `json:"menu_items"`
	} `json:"menu"`
	Name string `json:"name"`
}

// CreateRestaurantJSONRequestBody defines body for CreateRestaurant for application/json ContentType.
type CreateRestaurantJSONRequestBody CreateRestaurantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new restaurant for delivery
	// (POST /restaurants)
	CreateRestaurant(w http.ResponseWriter, r *http.Request)
	// Get information for an restaurant by ID
	// (GET /restaurants/{restaurantID})
	GetRestaurant(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateRestaurant operation middleware
func (siw *ServerInterfaceWrapper) CreateRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRestaurant(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRestaurant operation middleware
func (siw *ServerInterfaceWrapper) GetRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameter("simple", false, "restaurantID", chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter restaurantID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRestaurant(w, r, restaurantID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/restaurants", wrapper.CreateRestaurant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/restaurants/{restaurantID}", wrapper.GetRestaurant)
	})

	return r
}
