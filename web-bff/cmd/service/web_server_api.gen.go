// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/stackus/ftgogo/serviceapis/commonapi"
)

// Defines values for OrderState.
const (
	OrderStateApprovalPending OrderState = "ApprovalPending"

	OrderStateApproved OrderState = "Approved"

	OrderStateCancelPending OrderState = "CancelPending"

	OrderStateCancelled OrderState = "Cancelled"

	OrderStateRejected OrderState = "Rejected"

	OrderStateRevisionPending OrderState = "RevisionPending"
)

// OrderState defines model for OrderState.
type OrderState string

// ConsumerAddressID defines model for ConsumerAddressID.
type ConsumerAddressID string

// OrderID defines model for OrderID.
type OrderID string

// RestaurantID defines model for RestaurantID.
type RestaurantID string

// ConsumerAddressIDResponse defines model for ConsumerAddressIDResponse.
type ConsumerAddressIDResponse struct {
	AddressId  string `json:"address_id"`
	ConsumerId string `json:"consumer_id"`
}

// ConsumerAddressResponse defines model for ConsumerAddressResponse.
type ConsumerAddressResponse struct {
	Address externalRef0.Address `json:"address"`
}

// ConsumerIDResponse defines model for ConsumerIDResponse.
type ConsumerIDResponse struct {
	Id string `json:"id"`
}

// ConsumerResponse defines model for ConsumerResponse.
type ConsumerResponse struct {
	ConsumerId string `json:"consumer_id"`
	Name       string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// OrderIDResponse defines model for OrderIDResponse.
type OrderIDResponse struct {
	Id string `json:"id"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	OrderId    string     `json:"order_id"`
	OrderTotal int        `json:"order_total"`
	State      OrderState `json:"state"`
}

// OrderStatusResponse defines model for OrderStatusResponse.
type OrderStatusResponse struct {
	Status string `json:"status"`
}

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	Token string `json:"token"`
}

// AddConsumerAddressJSONBody defines parameters for AddConsumerAddress.
type AddConsumerAddressJSONBody struct {
	Address externalRef0.Address `json:"address"`
	Name    string               `json:"name"`
}

// UpdateConsumerAddressJSONBody defines parameters for UpdateConsumerAddress.
type UpdateConsumerAddressJSONBody struct {
	Address externalRef0.Address `json:"address"`
}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody struct {
	AddressId    string                          `json:"address_id"`
	ConsumerId   string                          `json:"consumer_id"`
	LineItems    externalRef0.MenuItemQuantities `json:"line_items"`
	RestaurantId string                          `json:"restaurant_id"`
}

// ReviseOrderJSONBody defines parameters for ReviseOrder.
type ReviseOrderJSONBody struct {
	RevisedQuantities externalRef0.MenuItemQuantities `json:"revised_quantities"`
}

// RegisterConsumerJSONBody defines parameters for RegisterConsumer.
type RegisterConsumerJSONBody struct {
	Name string `json:"name"`
}

// SignInConsumerJSONBody defines parameters for SignInConsumer.
type SignInConsumerJSONBody struct {
	ConsumerId string `json:"consumer_id"`
}

// AddConsumerAddressJSONRequestBody defines body for AddConsumerAddress for application/json ContentType.
type AddConsumerAddressJSONRequestBody AddConsumerAddressJSONBody

// UpdateConsumerAddressJSONRequestBody defines body for UpdateConsumerAddress for application/json ContentType.
type UpdateConsumerAddressJSONRequestBody UpdateConsumerAddressJSONBody

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody CreateOrderJSONBody

// ReviseOrderJSONRequestBody defines body for ReviseOrder for application/json ContentType.
type ReviseOrderJSONRequestBody ReviseOrderJSONBody

// RegisterConsumerJSONRequestBody defines body for RegisterConsumer for application/json ContentType.
type RegisterConsumerJSONRequestBody RegisterConsumerJSONBody

// SignInConsumerJSONRequestBody defines body for SignInConsumer for application/json ContentType.
type SignInConsumerJSONRequestBody SignInConsumerJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /addresses)
	AddConsumerAddress(w http.ResponseWriter, r *http.Request)

	// (DELETE /addresses/{consumerAddressID})
	RemoveConsumerAddress(w http.ResponseWriter, r *http.Request, consumerAddressID ConsumerAddressID)

	// (GET /addresses/{consumerAddressID})
	GetConsumerAddress(w http.ResponseWriter, r *http.Request, consumerAddressID ConsumerAddressID)

	// (PUT /addresses/{consumerAddressID})
	UpdateConsumerAddress(w http.ResponseWriter, r *http.Request, consumerAddressID ConsumerAddressID)

	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)

	// (GET /orders/{orderID})
	GetOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)

	// (PUT /orders/{orderID}/cancel)
	CancelOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)

	// (PUT /orders/{orderID}/revise)
	ReviseOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)

	// (GET /register)
	GetConsumer(w http.ResponseWriter, r *http.Request)

	// (POST /register)
	RegisterConsumer(w http.ResponseWriter, r *http.Request)

	// (GET /restaurants/{restaurantID})
	GetRestaurant(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)

	// (POST /signin)
	SignInConsumer(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AddConsumerAddress operation middleware
func (siw *ServerInterfaceWrapper) AddConsumerAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddConsumerAddress(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveConsumerAddress operation middleware
func (siw *ServerInterfaceWrapper) RemoveConsumerAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "consumerAddressID" -------------
	var consumerAddressID ConsumerAddressID

	err = runtime.BindStyledParameter("simple", false, "consumerAddressID", chi.URLParam(r, "consumerAddressID"), &consumerAddressID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter consumerAddressID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveConsumerAddress(w, r, consumerAddressID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetConsumerAddress operation middleware
func (siw *ServerInterfaceWrapper) GetConsumerAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "consumerAddressID" -------------
	var consumerAddressID ConsumerAddressID

	err = runtime.BindStyledParameter("simple", false, "consumerAddressID", chi.URLParam(r, "consumerAddressID"), &consumerAddressID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter consumerAddressID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsumerAddress(w, r, consumerAddressID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateConsumerAddress operation middleware
func (siw *ServerInterfaceWrapper) UpdateConsumerAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "consumerAddressID" -------------
	var consumerAddressID ConsumerAddressID

	err = runtime.BindStyledParameter("simple", false, "consumerAddressID", chi.URLParam(r, "consumerAddressID"), &consumerAddressID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter consumerAddressID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateConsumerAddress(w, r, consumerAddressID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrder(w, r, orderID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CancelOrder operation middleware
func (siw *ServerInterfaceWrapper) CancelOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelOrder(w, r, orderID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ReviseOrder operation middleware
func (siw *ServerInterfaceWrapper) ReviseOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter orderID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReviseOrder(w, r, orderID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetConsumer operation middleware
func (siw *ServerInterfaceWrapper) GetConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsumer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RegisterConsumer operation middleware
func (siw *ServerInterfaceWrapper) RegisterConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterConsumer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRestaurant operation middleware
func (siw *ServerInterfaceWrapper) GetRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameter("simple", false, "restaurantID", chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter restaurantID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRestaurant(w, r, restaurantID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SignInConsumer operation middleware
func (siw *ServerInterfaceWrapper) SignInConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignInConsumer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/addresses", wrapper.AddConsumerAddress)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/addresses/{consumerAddressID}", wrapper.RemoveConsumerAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/addresses/{consumerAddressID}", wrapper.GetConsumerAddress)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/addresses/{consumerAddressID}", wrapper.UpdateConsumerAddress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders", wrapper.CreateOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders/{orderID}", wrapper.GetOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/orders/{orderID}/cancel", wrapper.CancelOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/orders/{orderID}/revise", wrapper.ReviseOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/register", wrapper.GetConsumer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterConsumer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/restaurants/{restaurantID}", wrapper.GetRestaurant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signin", wrapper.SignInConsumer)
	})

	return r
}
